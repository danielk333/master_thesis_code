
/*void H_pot(   std::vector<std::vector<double> >* q_vec, 
            std::vector<std::vector<double> >* p_vec, 
            std::vector<double>* m_vector, 
            std::vector<int>* type_vec, 
            double dt);*/

    //Optimized Struct used by StepperBS
    //Avrage step execution             : 0.000369059 s
    //at rtol = atol = 1e-3
    /*struct rhs_grav {
        VecDoub M,Type;
        rhs_grav(VecDoub mM, VecDoub TypeP) : M(mM), Type(TypeP) {}
        void operator() (const Doub x, VecDoub_I &y, VecDoub_O &dydx) {
            int N,Nt,D,i,j,I,J,O,I_part;
            Doub R3;
            D = 3;
            Nt = y.size();
            N = Nt/2;
            O = N/D;
            //Set the dq/dt
            for(i=0;i < N; i++) {
                I = i/D;
                dydx[i] = y[i+N]/M[I];
            }

            //calc help matrix of inter-object distances for speedup
            std::vector<std::vector<double> > R;
            R.resize(O);
            for(I=0; I < O-1; I++) {
                R[I].resize(O);
                i = I*3;
                for(J=I+1;J < O; J++) {
                    j = J*3;
                    R[I][J] = sqrt( (y[i] - y[j])*(y[i] - y[j]) + (y[i+1] - y[j+1])*(y[i+1] - y[j+1]) + (y[i+2] - y[j+2])*(y[i+2] - y[j+2]));
                }
            }

            //Set the dp/dt
            for(i=N;i < Nt; i++) {
                I = (i-N)/D;
                I_part = (i-N) - I*D;
                dydx[i] = 0.0;
                for(J=0;J < O; J++) {
                    j = J*D + I_part;
                    if(Type[J] == 1 && I != J) {
                        if(I < J) {
                            R3 = R[I][J]*R[I][J]*R[I][J];
                        }
                        else {
                            R3 = R[J][I]*R[J][I]*R[J][I];
                        }
                        dydx[i] = dydx[i] + M[J]*(y[j] - y[i-N])/R3;
                    }
                }
                dydx[i] = M[I]*G*dydx[i];

            }
        }
    }; */


// FOR DEV CONT TRACKING OF PLANETS
/*
        if(sim.loops_performed < 4) {
            if(opt.verbose_level == 2) {
                out << "" << Num2Str(sim.loops_performed) + " STATE OF INTERACTING BODIES: ";
                for(i=0; i < sim.body_n; i++) {
                    if(type_vector[i] == 1) {
                        out << "ID: " + Num2Str(body_id_vector[i]);
                        out << "Position: " + Num2Str(q_vec[i][0]/AU) + " AU, " + Num2Str(q_vec[i][1]/AU)  + " AU, " + Num2Str(q_vec[i][2]/AU) + " AU. Norm = " + Num2Str(abs_v(q_vec[i])/AU) + " AU";
                        out << "Velocity: " + Num2Str(p_vec[i][0]/m_vector[i]*0.001) + " km/s, " + Num2Str(p_vec[i][1]/m_vector[i]*0.001) + " km/s, " + Num2Str(p_vec[i][2]/m_vector[i]*0.001) + " km/s. Norm = " + Num2Str(abs_v(p_vec[i])/m_vector[i]*0.001) + " km/s";
                    }
                }
                out << "";
            }
        }
*/

    //some speed testing
    /*clock_t tick,tock,tack;

    tock = clock();
    VecDoub NNN(1000000);
    tick = clock() - tock;

    tock = clock();
    std::vector<double> MMM(1000000);
    tack = clock() - tock;

    std::cout << "VecDoub is " << ((double)tack)/((double)tick) << " times faster than std::vector at EMPTY INIT" << std::endl;

    tock = clock();
    VecDoub NNNN;(100000000,0.0);
    tick = clock() - tock;

    tock = clock();
    std::vector<double> MMMM(100000000,0.0);
    tack = clock() - tock;

    std::cout << "VecDoub is " << ((double)tack)/((double)tick) << " times faster than std::vector AT FULL INIT" << std::endl;

    VecDoub NNNNN;
    tock = clock();
    NNNNN = NNNN;
    tick = clock() - tock;

    std::vector<double> MMMMM;
    tock = clock();
    MMMMM = MMMM;
    tack = clock() - tock;

    std::cout << "VecDoub is " << ((double)tack)/((double)tick) << " times faster than std::vector =" << std::endl;
    throw("im done");*/

    //Avrage step execution             : 6.13856e-05 s
/*void H_pot(std::vector<std::vector<double> >* q_vec, std::vector<std::vector<double> >* p_vec, std::vector<double>* m_vector, std::vector<int>* type_vec,double dt) {
    unsigned int i,j;

    std::vector<std::vector<double> > temp_kick_x,temp_kick_y,temp_kick_z;
    double temp_kick_xd = 0,temp_kick_yd = 0,temp_kick_zd = 0;
    double temp_dist;
    std::vector<double> temp_p;

    for(i=0; i < (*q_vec).size()-1; i++) {
        if((*type_vec)[i] == 1) {
            temp_kick_x.push_back(temp_p);
            temp_kick_y.push_back(temp_p);
            temp_kick_z.push_back(temp_p);

            for(j=i+1; j < (*q_vec).size(); j++) {
                temp_dist = sqrt(( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] )*( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] ) + ( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] )*( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] ) + ( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] )*( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] ));
                temp_dist = pow(temp_dist,3);
                temp_kick_x[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] )/temp_dist);
                temp_kick_y[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] )/temp_dist);
                temp_kick_z[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] )/temp_dist);
            }

        }
    }

    for(i=0; i < (*q_vec).size(); i++) {
        temp_kick_xd = 0; temp_kick_yd = 0; temp_kick_zd = 0;
        for(j=0; j < (*q_vec).size(); j++) {
            if((*type_vec)[j] == 1) {
                if(j < i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[j][i-j-1];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[j][i-j-1];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[j][i-j-1];
                }
                else if(j > i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[i][j-i-1];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[i][j-i-1];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[i][j-i-1];
                }
            }
        }

        ((*p_vec)[i])[0] = ((*p_vec)[i])[0] + dt*temp_kick_xd;
        ((*p_vec)[i])[1] = ((*p_vec)[i])[1] + dt*temp_kick_yd;
        ((*p_vec)[i])[2] = ((*p_vec)[i])[2] + dt*temp_kick_zd;
        
    }
    

}*/

//Avrage step execution             : 3.64789e-05 s
/*void H_pot(std::vector<std::vector<double> >* q_vec, std::vector<std::vector<double> >* p_vec, std::vector<double>* m_vector, std::vector<int>* type_vec,double dt) {
    unsigned int i,j;
    std::vector<double> temp_p((*q_vec).size());
    std::vector<std::vector<double> > temp_kick_x((*q_vec).size(),temp_p);
    std::vector<std::vector<double> > temp_kick_y((*q_vec).size(),temp_p);
    std::vector<std::vector<double> > temp_kick_z((*q_vec).size(),temp_p);
    double temp_kick_xd = 0,temp_kick_yd = 0,temp_kick_zd = 0;
    double temp_dist;

    for(i=0; i < (*q_vec).size()-1; i++) {
        if((*type_vec)[i] == 1) {
            for(j=i+1; j < (*q_vec).size(); j++) {
                temp_dist = sqrt(( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] )*( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] ) + ( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] )*( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] ) + ( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] )*( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] ));
                temp_dist = temp_dist*temp_dist*temp_dist;
                temp_kick_x[i][j]=( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[0] - ((*q_vec)[j])[0] )/temp_dist);
                temp_kick_y[i][j]=( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[1] - ((*q_vec)[j])[1] )/temp_dist);
                temp_kick_z[i][j]=( G*((*m_vector)[i])*((*m_vector)[j])*( ((*q_vec)[i])[2] - ((*q_vec)[j])[2] )/temp_dist);
            }

        }
    }

    for(i=0; i < (*q_vec).size(); i++) {
        temp_kick_xd = 0; 
        temp_kick_yd = 0; 
        temp_kick_zd = 0;
        for(j=0; j < (*q_vec).size(); j++) {
            if((*type_vec)[j] == 1) {
                if(j < i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[j][i];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[j][i];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[j][i];
                }
                else if(j > i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[i][j];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[i][j];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[i][j];
                }
            }
        }

        ((*p_vec)[i])[0] = ((*p_vec)[i])[0] + dt*temp_kick_xd;
        ((*p_vec)[i])[1] = ((*p_vec)[i])[1] + dt*temp_kick_yd;
        ((*p_vec)[i])[2] = ((*p_vec)[i])[2] + dt*temp_kick_zd;
        
    }
    

}*/


#include <vector>
#include <math.h>

#include "resources.hh"
#include "functions.hh"

/*
void BS_step(std::vector<std::vector<double> >* q_vec, std::vector<std::vector<double> >* p_vec, std::vector<double>* m_vector, std::vector<int>* type_vec, std::vector<unsigned int> N, double dt) {
    unsigned int i,j,k;
    std::vector<std::vector<double> > Z,P,X;
    std::vector<std::vector<double> > Zinit;
    std::vector<std::vector<double> > all_kicks_init;
    std::vector<std::vector<double> > all_kicks;
    std::vector<double> H;
    int TE = 0;
    unsigned int OBJS = (*q_vec).size();
    unsigned int VARS = OBJS*3;
    unsigned int SIZE = VARS*2;

    //P = fill_mat(SIZE,N.size(),0.0);
    P.resize(SIZE);
    for(i=0; i < SIZE; i++) {
        P[i].resize(N.size());
    }

    Zinit.push_back(H);
    Zinit[0].resize(SIZE);
    for(i=0; i < OBJS; i++) {
        Zinit[0][i*3]   = (*q_vec)[i][0];
        Zinit[0][i*3+1] = (*q_vec)[i][1];
        Zinit[0][i*3+2] = (*q_vec)[i][2];

        Zinit[0][VARS + i*3]   = (*p_vec)[i][0];
        Zinit[0][VARS + i*3+1] = (*p_vec)[i][1];
        Zinit[0][VARS + i*3+2] = (*p_vec)[i][2];
    }

    all_kicks_init = dZ(&Zinit, m_vector, type_vec, 0);

    for(k=0; k < N.size(); k++) {

        H.push_back(dt/N[k]);
        //Z = fill_mat(N[k]+1,SIZE,0.0);
        Z.resize(N[k]+1);
        for(i=0; i < N[k]+1; i++) {
            Z[i].resize(SIZE);
        }
        Z[0] = Zinit[0];

        for(i=0; i < OBJS; i++) {
            Z[1][i*3]   = (*q_vec)[i][0] + H[k]*(Z[0][VARS + i*3  ]/((*m_vector)[i]));
            Z[1][i*3+1] = (*q_vec)[i][1] + H[k]*(Z[0][VARS + i*3+1]/((*m_vector)[i]));
            Z[1][i*3+2] = (*q_vec)[i][2] + H[k]*(Z[0][VARS + i*3+2]/((*m_vector)[i]));

            Z[1][VARS + i*3]   = (*p_vec)[i][0] + H[k]*all_kicks_init[i][0];
            Z[1][VARS + i*3+1] = (*p_vec)[i][1] + H[k]*all_kicks_init[i][1];
            Z[1][VARS + i*3+2] = (*p_vec)[i][2] + H[k]*all_kicks_init[i][2];
        }

        for(j=1; j < N[k]; j++) {

            all_kicks = dZ(&Z, m_vector, type_vec, j);

            for(i=0; i < OBJS; i++) {
                Z[j+1][i*3  ] = Z[j-1][i*3  ] + 2.0*H[k]*( Z[j][VARS + i*3  ] /(*m_vector)[i]);
                Z[j+1][i*3+1] = Z[j-1][i*3+1] + 2.0*H[k]*( Z[j][VARS + i*3+1] /(*m_vector)[i]);
                Z[j+1][i*3+2] = Z[j-1][i*3+2] + 2.0*H[k]*( Z[j][VARS + i*3+2] /(*m_vector)[i]);

                Z[j+1][VARS + i*3  ] = Z[j-1][VARS + i*3  ] + 2.0*H[k]*all_kicks[i][0];
                Z[j+1][VARS + i*3+1] = Z[j-1][VARS + i*3+1] + 2.0*H[k]*all_kicks[i][1];
                Z[j+1][VARS + i*3+2] = Z[j-1][VARS + i*3+2] + 2.0*H[k]*all_kicks[i][2];
            }
        }

        all_kicks = dZ(&Z, m_vector, type_vec, N[k]);
        for(i=0; i < OBJS; i++) {
            P[i*3  ][k] = 0.5*(Z[N[k]][i*3  ] + Z[N[k]-2][i*3  ] + H[k]*( Z[N[k]][VARS + i*3  ] /(*m_vector)[i]) );
            P[i*3+1][k] = 0.5*(Z[N[k]][i*3+1] + Z[N[k]-2][i*3+1] + H[k]*( Z[N[k]][VARS + i*3+1] /(*m_vector)[i]) );
            P[i*3+2][k] = 0.5*(Z[N[k]][i*3+2] + Z[N[k]-2][i*3+2] + H[k]*( Z[N[k]][VARS + i*3+2] /(*m_vector)[i]) );

            P[VARS + i*3  ][k] = 0.5*(Z[N[k]][VARS + i*3  ] + Z[N[k]-2][VARS + i*3  ] + H[k]*( all_kicks[i][0] ) );
            P[VARS + i*3+1][k] = 0.5*(Z[N[k]][VARS + i*3+1] + Z[N[k]-2][VARS + i*3+1] + H[k]*( all_kicks[i][1] ) );
            P[VARS + i*3+2][k] = 0.5*(Z[N[k]][VARS + i*3+2] + Z[N[k]-2][VARS + i*3+2] + H[k]*( all_kicks[i][2] ) );
        }

    }

    for(i=0; i < OBJS; i++) {
        ((*q_vec)[i])[0] = neville(&H,&P[i*3  ],0.0);
        ((*q_vec)[i])[1] = neville(&H,&P[i*3+1],0.0);
        ((*q_vec)[i])[2] = neville(&H,&P[i*3+2],0.0);

        ((*p_vec)[i])[0] = neville(&H,&P[VARS + i*3  ],0.0);
        ((*p_vec)[i])[1] = neville(&H,&P[VARS + i*3+1],0.0);
        ((*p_vec)[i])[2] = neville(&H,&P[VARS + i*3+2],0.0);
    }

}


std::vector<std::vector<double> > dZ(std::vector<std::vector<double> >* Z, std::vector<double>* m_vector, std::vector<int>* type_vec, unsigned int ind) {
    std::vector<std::vector<double> > temp_kick_x,temp_kick_y,temp_kick_z;
    std::vector<std::vector<double> > all_kicks;
    double temp_kick_xd = 0,temp_kick_yd = 0,temp_kick_zd = 0;
    double temp_dist;
    double EM_mag;
    double v_dot;
    double S;
    std::vector<double> temp_x;
    std::vector<double> temp_v;
    std::vector<double> temp_p;

    unsigned int i,j;


    temp_x.resize(3);
    temp_v.resize(3);
    
    unsigned int OBJS = (*type_vec).size();

    for(i=0; i < OBJS-1; i++) {
        if((*type_vec)[i] == 1) {
            temp_kick_x.push_back(temp_p);
            temp_kick_y.push_back(temp_p);
            temp_kick_z.push_back(temp_p);

            for(j=i+1; j < OBJS; j++) {
                temp_dist = sqrt(( (*Z)[ind][i*3] - (*Z)[ind][j*3] )*( (*Z)[ind][i*3] - (*Z)[ind][j*3] ) + ( (*Z)[ind][i*3+1] - (*Z)[ind][j*3+1] )*( (*Z)[ind][i*3+1] - (*Z)[ind][j*3+1] ) + ( (*Z)[ind][i*3+2] - (*Z)[ind][j*3+2] )*( (*Z)[ind][i*3+2] - (*Z)[ind][j*3+2] ));
                temp_dist = pow(temp_dist,3);
                temp_kick_x[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( (*Z)[ind][i*3  ] - (*Z)[ind][j*3  ] )/temp_dist);
                temp_kick_y[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( (*Z)[ind][i*3+1] - (*Z)[ind][j*3+1] )/temp_dist);
                temp_kick_z[i].push_back( G*((*m_vector)[i])*((*m_vector)[j])*( (*Z)[ind][i*3+2] - (*Z)[ind][j*3+2] )/temp_dist);
            }

        }
    }

    for(i=0; i < OBJS; i++) {
        temp_kick_xd = 0; temp_kick_yd = 0; temp_kick_zd = 0;
        for(j=0; j < OBJS; j++) {
            if((*type_vec)[j] == 1) { //ADDED FOR SPEED
                if(j < i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[j][i-j-1];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[j][i-j-1];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[j][i-j-1];
                }
                else if(j > i) {
                    temp_kick_xd = temp_kick_xd + temp_kick_x[i][j-i-1];
                    temp_kick_yd = temp_kick_yd + temp_kick_y[i][j-i-1];
                    temp_kick_zd = temp_kick_zd + temp_kick_z[i][j-i-1];
                }
            }
        }
*/
        /*if((*type_vec)[i] == 0) { //EM effect
            
            temp_x[0] = (*Z)[ind][i*3  ]-(*Z)[ind][0];
            temp_x[1] = (*Z)[ind][i*3+1]-(*Z)[ind][1];
            temp_x[2] = (*Z)[ind][i*3+2]-(*Z)[ind][2];


            temp_dist = abs_v(temp_x);
            S = pow(((*m_vector)[i]/rho)*0.75/PI,1.0/3.0);
            EM_mag = (sol_L*(S*S*PI))/(c0*4.0*PI*temp_dist*temp_dist);

            temp_v[0] = ((*Z)[ind][(OBJS+i)*3  ]/(*m_vector)[i]);
            temp_v[1] = ((*Z)[ind][(OBJS+i)*3+1]/(*m_vector)[i]);
            temp_v[2] = ((*Z)[ind][(OBJS+i)*3+2]/(*m_vector)[i]);

            temp_x[0] = (*Z)[ind][i*3  ]/temp_dist;
            temp_x[1] = (*Z)[ind][i*3+1]/temp_dist;
            temp_x[2] = (*Z)[ind][i*3+2]/temp_dist;

            v_dot = dot_product(temp_v,temp_x);

            temp_kick_xd = temp_kick_xd + EM_mag*((1 - v_dot/c0)*temp_x[0] - temp_v[0]/c0);
            temp_kick_yd = temp_kick_yd + EM_mag*((1 - v_dot/c0)*temp_x[1] - temp_v[1]/c0);
            temp_kick_zd = temp_kick_zd + EM_mag*((1 - v_dot/c0)*temp_x[2] - temp_v[2]/c0);
        }*/
/*
        temp_p.clear();
        temp_p.push_back(temp_kick_xd);
        temp_p.push_back(temp_kick_yd);
        temp_p.push_back(temp_kick_zd);
        all_kicks.push_back(temp_p);
    }
    return all_kicks;
}
*/